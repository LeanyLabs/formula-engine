{"version":3,"file":"engine.js","sourceRoot":"","sources":["../../src/engine.ts"],"names":[],"mappings":";;;AAAA,6CAAuD;AACvD,mCAAuC;AACvC,qCAAyC;AACzC,uCAA0E;AAQ1E,MAAa,aAAa;IAKxB,YACU,iBAA6D,EAC7D,SAA4B;QAD5B,sBAAiB,GAAjB,iBAAiB,CAA4C;QAC7D,cAAS,GAAT,SAAS,CAAmB;QAEpC,IAAI,CAAC,MAAM,GAAG,IAAI,sBAAa,EAAE,CAAC;QAClC,IAAI,CAAC,WAAW,GAAG,2BAAiB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAClE,IAAI,CAAC,UAAU,GAAG,0BAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClD,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEjC,MAAM,aAAa,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;QAC9C,MAAM,SAAS,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;QAExD,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QAC1D,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,OAAe;QAC7B,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAEjC,MAAM,aAAa,GAAG,EAAE,CAAC;QACzB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;QAC9C,MAAM,SAAS,GAAG,MAAO,IAAI,CAAC,iBAA4C,CACxE,aAAa,CACd,CAAC;QAEF,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;QAC1D,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,MAAM,CAAC,OAAe;QAC5B,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC5C,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACrC,OAAO,GAAG,CAAC;IACb,CAAC;IAEO,QAAQ,CAAC,OAAe;QAC9B,MAAM,YAAY,GAAG,oBAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QACpD,IAAI,YAAY,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAClC,MAAM,IAAI,uBAAU,CAAC,oBAAoB,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;SACjE;QACD,OAAO,YAAY,CAAC;IACtB,CAAC;IAEO,KAAK,CAAC,YAAY;QACxB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QACpB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,YAAY,CAAC,MAAM,CAAC;QACxC,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QAErC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACzC,MAAM,IAAI,wBAAW,CAAC,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;SAC5D;QAED,OAAO,GAAG,CAAC;IACb,CAAC;CACF;AA/DD,sCA+DC","sourcesContent":["import { LexerError, ParserError } from \"./exceptions\";\nimport { FormulaLexer } from \"./lexer\";\nimport { FormulaParser } from \"./parser\";\nimport { createEvalVisitor, createRefVisitor, IVisitor } from \"./visitor\";\n\nexport type FunctionsResolver = Record<string, Function>;\nexport type ReferenceResolver = (names: string[]) => Record<string, any>;\nexport type ReferenceResolverAsync = (\n  names: string[]\n) => Promise<Record<string, any>>;\n\nexport class FormulaEngine {\n  private parser: FormulaParser;\n  private evalVisitor: IVisitor;\n  private refVisitor: IVisitor;\n\n  constructor(\n    private resolveReferences: ReferenceResolver | ReferenceResolverAsync,\n    private functions: FunctionsResolver\n  ) {\n    this.parser = new FormulaParser();\n    this.evalVisitor = createEvalVisitor(this.parser, this.functions);\n    this.refVisitor = createRefVisitor(this.parser);\n  }\n\n  exec(formula: string) {\n    const cst = this.getCst(formula);\n\n    const externalNames = [];\n    this.refVisitor.visit(cst, { externalNames });\n    const externals = this.resolveReferences(externalNames);\n\n    const result = this.evalVisitor.visit(cst, { externals });\n    return result;\n  }\n\n  async execAsync(formula: string) {\n    const cst = this.getCst(formula);\n\n    const externalNames = [];\n    this.refVisitor.visit(cst, { externalNames });\n    const externals = await (this.resolveReferences as ReferenceResolverAsync)(\n      externalNames\n    );\n\n    const result = this.evalVisitor.visit(cst, { externals });\n    return result;\n  }\n\n  private getCst(formula: string) {\n    const lexingResult = this.tokenize(formula);\n    const cst = this.parse(lexingResult);\n    return cst;\n  }\n\n  private tokenize(formula: string) {\n    const lexingResult = FormulaLexer.tokenize(formula);\n    if (lexingResult.errors.length > 0) {\n      throw new LexerError(\"Tokenization error\", lexingResult.errors);\n    }\n    return lexingResult;\n  }\n\n  private parse(lexingResult) {\n    this.parser.reset();\n    this.parser.input = lexingResult.tokens;\n    const cst = this.parser.expression();\n\n    if (!cst || this.parser.errors.length > 0) {\n      throw new ParserError(\"Parsing error\", this.parser.errors);\n    }\n\n    return cst;\n  }\n}\n"]}