{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../src/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { CstParser } from \"chevrotain\";\nimport { tokens } from \"./lexer\";\n\nexport class FormulaParser extends CstParser {\n  constructor() {\n    super(tokens, {\n      maxLookahead: 1,\n    });\n    this.performSelfAnalysis();\n  }\n\n  expression = this.RULE(\"expression\", () => {\n    this.SUBRULE(this.comparisonExpression);\n  });\n\n  comparisonExpression = this.RULE(\"comparisonExpression\", () => {\n    this.SUBRULE(this.additionExpression, { LABEL: \"lhs\" });\n    this.OPTION(() => {\n      this.CONSUME(tokens.ComparisonOperator);\n      this.SUBRULE1(this.additionExpression, { LABEL: \"rhs\" });\n    });\n  });\n\n  additionExpression = this.RULE(\"additionExpression\", () => {\n    this.SUBRULE(this.multiplicationExpression, { LABEL: \"lhs\" });\n    this.MANY(() => {\n      this.CONSUME(tokens.AdditionOperator);\n      this.SUBRULE1(this.multiplicationExpression, { LABEL: \"rhs\" });\n    });\n  });\n\n  multiplicationExpression = this.RULE(\"multiplicationExpression\", () => {\n    this.SUBRULE(this.atomicExpression, { LABEL: \"lhs\" });\n    this.MANY(() => {\n      this.CONSUME(tokens.MultiplicationOperator);\n      this.SUBRULE1(this.atomicExpression, { LABEL: \"rhs\" });\n    });\n  });\n\n  atomicExpression = this.RULE(\"atomicExpression\", () => {\n    this.OR([\n      { ALT: () => this.SUBRULE(this.functionExpression) },\n      { ALT: () => this.SUBRULE(this.parenthesisExpression) },\n      { ALT: () => this.SUBRULE(this.reference) },\n      { ALT: () => this.CONSUME(tokens.NumberLiteral) },\n      { ALT: () => this.CONSUME(tokens.BooleanLiteral) },\n      { ALT: () => this.CONSUME(tokens.SStringLiteral) },\n      { ALT: () => this.CONSUME(tokens.DStringLiteral) },\n    ]);\n  });\n\n  reference = this.RULE(\"reference\", () => {\n    this.CONSUME(tokens.Reference);\n  });\n\n  functionExpression = this.RULE(\"functionExpression\", () => {\n    this.CONSUME(tokens.Function);\n    this.CONSUME(tokens.LParen);\n    this.SUBRULE(this.arguments);\n    this.CONSUME(tokens.RParen);\n  });\n\n  parenthesisExpression = this.RULE(\"parenthesisExpression\", () => {\n    this.CONSUME(tokens.LParen);\n    this.SUBRULE(this.expression);\n    this.CONSUME(tokens.RParen);\n  });\n\n  arguments = this.RULE(\"arguments\", () => {\n    this.MANY_SEP({\n      SEP: tokens.Comma,\n      DEF: () => {\n        this.SUBRULE(this.additionExpression);\n      },\n    });\n  });\n}\n"]}