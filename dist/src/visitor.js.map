{"version":3,"file":"visitor.js","sourceRoot":"","sources":["../../src/visitor.ts"],"names":[],"mappings":"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","sourcesContent":["import { CstNode, tokenMatcher } from \"chevrotain\";\nimport { FunctionError } from \"./exceptions\";\nimport { tokens } from \"./lexer\";\nimport { FormulaParser } from \"./parser\";\n\nexport interface IVisitor {\n  visit(cst: CstNode, state: any): any;\n}\n\nexport function createEvalVisitor(\n  parser: FormulaParser,\n  functions: any\n): IVisitor {\n  const FormulaVisitorBase = parser.getBaseCstVisitorConstructorWithDefaults();\n\n  class InterpreterVisitor extends FormulaVisitorBase {\n    constructor() {\n      super();\n      this.validateVisitor();\n    }\n\n    expression(ctx, state): any {\n      return this.visit(ctx.comparisonExpression, state);\n    }\n\n    comparisonExpression(ctx, state): any {\n      let left = this.visit(ctx.lhs, state);\n      if (!ctx.rhs) return left;\n\n      let right = this.visit(ctx.rhs, state);\n      const operator = ctx.ComparisonOperator[0];\n\n      if (tokenMatcher(operator, tokens.Lt)) {\n        return left < right;\n      }\n      if (tokenMatcher(operator, tokens.Lte)) {\n        return left <= right;\n      }\n      if (tokenMatcher(operator, tokens.Gt)) {\n        return left > right;\n      }\n      if (tokenMatcher(operator, tokens.Gte)) {\n        return left >= right;\n      }\n      if (tokenMatcher(operator, tokens.Eq)) {\n        return left === right;\n      }\n      throw new Error(`Operator not implemented: ${operator}`);\n    }\n\n    additionExpression(ctx, state): any {\n      let result = this.visit(ctx.lhs, state);\n      if (!ctx.rhs) return result;\n      for (let i = 0; i < ctx.rhs.length; i++) {\n        const operator = ctx.AdditionOperator[i];\n        const value = this.visit(ctx.rhs[i], state);\n        if (tokenMatcher(operator, tokens.Plus)) {\n          result += value;\n        } else if (tokenMatcher(operator, tokens.Minus)) {\n          result -= value;\n        } else {\n          throw new Error(\n            `Unknown operator: ${operator.image} at ${operator.startOffset}`\n          );\n        }\n      }\n      return result;\n    }\n\n    multiplicationExpression(ctx, state): any {\n      let result = this.visit(ctx.lhs, state);\n      if (!ctx.rhs) return result;\n      for (let i = 0; i < ctx.rhs.length; i++) {\n        const operator = ctx.MultiplicationOperator[i];\n        const value = this.visit(ctx.rhs[i], state);\n        if (tokenMatcher(operator, tokens.Multi)) {\n          result *= value;\n        } else if (tokenMatcher(operator, tokens.Div)) {\n          result /= value;\n        } else {\n          throw new Error(\n            `Unknown operator: ${operator.image} at ${operator.startOffset}`\n          );\n        }\n      }\n      return result;\n    }\n\n    atomicExpression(ctx, state): any {\n      if (ctx.functionExpression) {\n        return this.visit(ctx.functionExpression, state);\n      }\n      if (ctx.parenthesisExpression) {\n        return this.visit(ctx.parenthesisExpression, state);\n      }\n      if (ctx.reference) {\n        return this.visit(ctx.reference, state);\n      }\n      if (ctx.NumberLiteral) {\n        return Number.parseFloat(ctx.NumberLiteral[0].image);\n      }\n      if (ctx.BooleanLiteral) {\n        return ctx.BooleanLiteral[0].image === \"true\" ? true : false;\n      }\n      if (ctx.SStringLiteral) {\n        return ctx.SStringLiteral[0].image.slice(1, -1).replace(/''/, \"'\");\n      }\n      if (ctx.DStringLiteral) {\n        return ctx.DStringLiteral[0].image.slice(1, -1).replace(/\"\"/, '\"');\n      }\n    }\n\n    functionExpression(ctx, state): any {\n      const functionName = ctx.Function[0].image;\n      const func = functions[functionName];\n\n      if (!func) {\n        throw new Error(\n          `Unknown function: ${functionName} at ${ctx.Function[0].startOffset}`\n        );\n      }\n\n      const args = this.visit(ctx.arguments[0], state);\n\n      try {\n        const result = func.apply({}, args);\n        return result;\n      } catch (err) {\n        throw new FunctionError(\n          `Function ${functionName} at ${ctx.Function[0].startOffset} thrown an error: ${err}, stacktrace: ${err.stack}`,\n          { originalError: err, functionName, function: ctx.Function[0] }\n        );\n      }\n    }\n\n    reference(ctx, state): any {\n      const name = ctx.Reference[0].image.slice(1, -1);\n      return state.externals[name];\n    }\n\n    parenthesisExpression(ctx, state): any {\n      return this.visit(ctx.expression, state);\n    }\n\n    arguments(ctx, state): any {\n      if (!ctx.additionExpression) return [];\n      const result = ctx.additionExpression.map((arg) =>\n        this.visit(arg, state)\n      );\n      return result;\n    }\n  }\n\n  return new InterpreterVisitor();\n}\n\nexport function createRefVisitor(parser: FormulaParser): IVisitor {\n  const FormulaVisitorBase = parser.getBaseCstVisitorConstructorWithDefaults();\n\n  class RefVisitor extends FormulaVisitorBase {\n    constructor() {\n      super();\n      this.validateVisitor();\n    }\n\n    reference(ctx, state): any {\n      const name = ctx.Reference[0].image.slice(1, -1);\n      return state.externalNames.push(name);\n    }\n  }\n\n  return new RefVisitor();\n}\n"]}