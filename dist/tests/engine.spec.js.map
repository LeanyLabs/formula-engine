{"version":3,"file":"engine.spec.js","sourceRoot":"","sources":["../../tests/engine.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { FormulaEngine } from \"../src/engine\";\nimport * as functions from \"./test-functions\";\n\ndescribe(\"Engine\", () => {\n  function resolveReferencesSync(names: string[]): Record<string, any> {\n    return {\n      a: 10,\n      b: 20,\n    };\n  }\n  const engine = new FormulaEngine(resolveReferencesSync, functions);\n\n  function assertEqual(formula: string, result) {\n    expect(engine.exec(formula)).toEqual(result);\n  }\n\n  describe(\"simple operations\", () => {\n    describe(\"add/subtract\", () => {\n      it(\"should work for literals\", () => {\n        assertEqual(\"10 + 20\", 30);\n      });\n      it(\"should work for references\", () => {\n        assertEqual(\"{a} + {b}\", 30);\n      });\n      it(\"should work for literals - sub\", () => {\n        assertEqual(\"10 - 20\", -10);\n      });\n    });\n\n    describe(\"mul/div\", () => {\n      it(\"should work for literals\", () => {\n        assertEqual(\"10 * 20\", 200);\n      });\n      it(\"should work for references\", () => {\n        assertEqual(\"{a} * {b}\", 200);\n      });\n    });\n\n    describe(\"priorities\", () => {\n      it(\"should do mul before addition\", () => {\n        assertEqual(\"1 + 2 * 3\", 7);\n      });\n\n      it(\"should do div before addition\", () => {\n        assertEqual(\"1 + 3 / 3\", 2);\n      });\n\n      it(\"should do op in parens first\", () => {\n        assertEqual(\"(1 + 3) / 2\", 2);\n      });\n\n      it(\"should do add/mul before comparison\", () => {\n        assertEqual(\"1 + 4 / 2 < 3 + 1\", true);\n      });\n    });\n\n    describe(\"formatting\", () => {\n      it(\"should work w/o whitespace separators\", () => {\n        assertEqual(\"10+20\", 30);\n        assertEqual(\"10+ 20\", 30);\n        assertEqual(\"10 +20\", 30);\n        assertEqual(\"1 + 2 *3\", 7);\n        assertEqual(\"1+2 *3\", 7);\n      });\n    });\n\n    describe(\"functions\", () => {\n      it(\"should use custom functions\", () => {\n        assertEqual(\"ADD(1, 2)\", 3);\n      });\n\n      it(\"should calc function arguments\", () => {\n        assertEqual(\"ADD(1+2, 3)\", 6);\n      });\n\n      it(\"should resolve refs\", () => {\n        assertEqual(\"ADD({a}, 3)\", 13);\n      });\n\n      it(\"should calc functions as arguments\", () => {\n        assertEqual(\"ADD(SUB({a}, 3), 10)\", 17);\n      });\n\n      it(\"should work with strings as return value\", async () => {\n        assertEqual(\"'The date is: ' + NOW()\", \"The date is: 01-02-2021\");\n      });\n    });\n  });\n\n  describe(\"data types\", () => {\n    describe(\"strings\", () => {\n      it(\"should add strings\", () => {\n        assertEqual(\"'a' + 'b'\", \"ab\");\n      });\n\n      it(\"should add dbl quoted strings\", () => {\n        assertEqual(`\"a\" + \"b\"`, \"ab\");\n      });\n\n      it(\"should be able to use string as a function argument\", async () => {\n        assertEqual(`TO_UPPER('abc')`, \"ABC\");\n      });\n    });\n  });\n\n  describe(\"comparison\", () => {\n    it(\"should compare two values\", async () => {\n      assertEqual(`10 > 20`, false);\n      assertEqual(`10 < 20`, true);\n    });\n\n    it(\"should compare two values with lt/gt equal\", async () => {\n      assertEqual(`10 >= 20`, false);\n      assertEqual(`30 <= 20`, false);\n\n      assertEqual(`10 <= 10`, true);\n      assertEqual(`10 >= 10`, true);\n    });\n\n    it(\"should compare two values for equality\", async () => {\n      assertEqual(`10 == 20`, false);\n      assertEqual(`20 == 20`, true);\n    });\n\n    it(\"should compare string for equality\", async () => {\n      assertEqual(`'one' == \"one\"`, true);\n      assertEqual(`'one' == 'one'`, true);\n      assertEqual(`'one' == 'two'`, false);\n      assertEqual(`'one' == 'ONE'`, false);\n    });\n\n    it(\"should compare variables\", async () => {\n      assertEqual(`{a} < {b}`, true);\n      assertEqual(`{a} > {b}`, false);\n      assertEqual(`{a} == 10`, true);\n    });\n  });\n\n  describe(\"invalid syntax\", () => {\n    it(\"should throw ParsingError\", async () => {\n      expect(() => engine.exec(`10 <*`)).toThrowErrorMatchingSnapshot();\n    });\n\n    it(\"should throw LexerError\", async () => {\n      expect(() => engine.exec(`^`)).toThrowErrorMatchingSnapshot();\n    });\n  });\n\n  describe(\"functions\", () => {\n    it(\"should throw FunctionError if function fails\", async () => {\n      expect(() => engine.exec(`THROW()`)).toThrowError();\n    });\n  });\n});\n"]}